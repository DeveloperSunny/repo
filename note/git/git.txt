ssh-keygen -t rsa -C "smallbug_vip@163.com"			  #生成密钥
git init                                                  # 初始化本地git仓库（创建新仓库）
git config --global user.name "smallbug-vip"                       # 配置用户名
git config --global user.email "smallbug7758@gmail.com"              # 配置邮件
git config --global color.ui true                         # git status等命令自动着色
git config --global color.status auto
git config --global color.diff auto
git config --global color.branch auto
git config --global color.interactive auto
git config --global --unset http.proxy                    # remove  proxy configuration on git
git clone git+ssh://git@github.com:smallbug-vip/configuration.git             # clone远程仓库
git status                                                # 查看当前版本状态（是否修改）
git add xyz                                               # 添加xyz文件至index
git add .                                                 # 增加当前子目录下所有更改过的文件至index
git commit -m 'xxx'                                       # 提交
git commit --amend -m 'xxx'                               # 合并上一次提交（用于反复修改）
git commit -am 'xxx'                                      # 将add和commit合为一步
git rm xxx                                                # 删除index中的文件
git rm -r *                                               # 递归删除
git log                                                   # 显示提交日志（--pretty=oneline）
git log -1                                                # 显示1行日志 -n为n行
git log -5
git log --stat                                            # 显示提交日志及相关变动文件
git log -p -m
git show dfb02e6e4f2f7b573337763e5c0013802e392818         # 显示某个提交的详细内容
git show dfb02                                            # 可只用commitid的前几位
git show HEAD                                             # 显示HEAD提交日志
git show HEAD^                                            # 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本
git tag                                                   # 显示已存在的tag
git tag -a v2.0 -m 'xxx'                                  # 增加v2.0的tag
git show v2.0                                             # 显示v2.0的日志及详细内容
git log v2.0                                              # 显示v2.0的日志
git diff                                                  # 显示所有未添加至index的变更
git diff --cached                                         # 显示所有已添加index但还未commit的变更
git diff HEAD^                                            # 比较与上一个版本的差异
git diff HEAD -- ./lib                                    # 比较与HEAD版本lib目录的差异
git diff origin/master..master                            # 比较远程分支master上有本地分支master上没有的
git diff origin/master..master --stat                     # 只显示差异的文件，不显示具体内容
git remote add origin git+ssh://git@192.168.53.168/VT.git # 增加远程定义（用于push/pull/fetch）
git branch                                                # 显示本地分支
git branch --contains 50089                               # 显示包含提交50089的分支
git branch -a                                             # 显示所有分支
git branch -r                                             # 显示所有原创分支
git branch --merged                                       # 显示所有已合并到当前分支的分支
git branch --no-merged                                    # 显示所有未合并到当前分支的分支
git branch -m master master_copy                          # 本地分支改名
git checkout -b master_copy                               # 从当前分支创建新分支master_copy并检出
git checkout -b master master_copy                        # 上面的完整版
git checkout features/performance                         # 检出已存在的features/performance分支
git checkout --track hotfixes/BJVEP933                    # 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支
git checkout v2.0                                         # 检出版本v2.0
git checkout -b devel origin/develop                      # 从远程分支develop创建新本地分支devel并检出
git checkout -- README                                    # 检出head版本的README文件（可用于修改错误回退）
git merge origin/master                                   # 合并远程master分支至当前分支
git cherry-pick ff44785404a8e                             # 合并提交ff44785404a8e的修改
git push origin master                                    # 将当前分支push到远程master分支
git push origin :hotfixes/BJVEP933                        # 删除远程仓库的hotfixes/BJVEP933分支
git push --tags                                           # 把所有tag推送到远程仓库
git fetch                                                 # 获取所有远程分支（不更新本地分支，另需merge）
git fetch --prune                                         # 获取所有原创分支并清除服务器上已删掉的分支
git pull origin master                                    # 获取远程分支master并merge到当前分支
git mv README README2                                     # 重命名文件README为README2
git reset --hard HEAD                                     # 将当前版本重置为HEAD（通常用于merge失败回退）
git reset HEAD filename									  # 将暂存区的修改撤销掉
git rebase
git branch -d hotfixes/BJVEP933                           # 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）
git branch -D hotfixes/BJVEP933                           # 强制删除分支hotfixes/BJVEP933
git ls-files                                              # 列出git index包含的文件
git show-branch                                           # 图示当前分支历史
git show-branch --all                                     # 图示所有分支历史
git whatchanged                                           # 显示提交历史对应的文件修改
git revert dfb02e6e4f2f7b573337763e5c0013802e392818       # 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818
git reset --hard HEAD^
git ls-tree HEAD                                          # 内部命令：显示某个git对象
git rev-parse v2.0                                        # 内部命令：显示某个ref对于的SHA1 HASH
git reflog                                                # 显示所有提交，包括孤立节点
git show HEAD@{5}
git show master@{yesterday}                               # 显示master分支昨天的状态
git log --pretty=format:'%h %s' --graph                   # 图示提交日志
git show HEAD~3
git show -s --pretty=raw 2be7fcb476
git stash                                                 # 暂存当前修改，将所有至为HEAD状态
git stash list                                            # 查看所有暂存
git stash show -p stash@{0}                               # 参考第一次暂存
git stash apply stash@{0}                                 # 应用第一次暂存
git grep "delete from"                                    # 文件中搜索文本“delete from”
git grep -e '#define' --and -e SORT_DIRENT
git gc
git fsck

git@github.com:smallbug-vip/ITS


git push origin HEAD --force							#强制删除commit的版本


###########################################################################################################

ssh-keygen -t rsa -C "smallbug_vip@163.com"

git config --global user.name "smallbug-vip"                       # 配置用户名
git config --global user.email "smallbug7758@gmail.com"              # 配置邮件




ssh-keygen -t rsa -C "i-jiashuomeng@pptv.com"

git config --global user.name "jiashuomeng"                       # 配置用户名
git config --global user.email "i-jiashuomeng@pptv.com"              # 配置邮件


空文件：git init

创建文件

git add filename

git commit -m "version name"

git status   #查看状态

git diff  查看不同

git log

git log --pretty=oneline  #简约版


git reset --hard HEAD^

git reset --hard HEAD~100


git reset --hard 3628164    #回退到刚才的版本

git reflog   版本控制命令

git checkout -- * #丢弃工作区的修改，将所有文件会退到最后一次add或commit时的状态

git reset HEAD filename   #把暂存区的修改撤销掉

ssh-keygen -t rsa -C "smallbug_vip@163.com"			  #生成密钥

git remote add origin git@github.com:smallbug-vip/its.git   #关联远程仓库
git remote add origin git@github.com:smallbug-vip/repo.git   #关联远程仓库

git push -u origin master   #本地库推送到远程库   -u 本地与远程关联，第一次使用，之后可以省略

git clone git@github.com:smallbug-vip/repo.git    #从远程克隆仓库到本地

git remote set-url origin git@github.com:smallbug-vip/its.git  #重新远程

git pull --rebase origin master    





/**********************************************************************************************************************

git push -u origin vipbackend_sprint45_jiashuomeng_system



git checkout -b vipbackend_sprint45_jiashuomeng_system


git 提交 vipbackend_sprint45_jiashuomeng_


git diff --cached master>/d/git/diff/diff.patch
git diff HEAD^ >/d/git/diff/diff.patch

git commit –a -m "vipbackend_sprint45_jiashuomeng_menuchange"


git clone -b vipbackend_sprint45_jiashuomeng git@gitlab:vip-team/vipgit.git



-m "vipbackend_sprint45_jiashuomeng_system"

git diff HEAD -- * 命令可以查看工作区或缓存区和版本库里面最新版本的区别

git reset --hard HEAD   将修改回退到头指针

git checkout -- *  丢弃工作区的修改


=========================================================

Git使用流程如下：

1. 本地从master切出新的开发分支（保证本地master的版本是最新的）

git checkout master

git pull

git checkout –b vipbackend_sprint52_jiashuomeng_daypay

 


2. 提交本地的修改并push到远程仓库

git add . 或 git add --all 或 git add -i

git status                               -> 检查提交的改动是否as expected

git commit -m ‘your comment’

git push origin -u vipbackend_sprint52_jiashuomeng_daypay



3. 提测前检查是否与master分支有冲突，如果有冲突，solve the conflicts（要求开发执行这一步）

git checkout master

git pull

git checkout -

git merge master

git push

 


4. QA测试完毕之后方才把开发分支merge到master分支上

redis-cli -h kvdblvs1.bjjxq.idc.pplive.cn -p 19380



vipbackend <--test

1> vipbackend_sprint52_jiashuomeng_daypay   http://pha.pptv.com/D8417
2> vipbackend_sprint52_jiashuomeng_mobilesuggest   http://pha.pptv.com/D8483
3> vipbackend_sprint52_jiashuomeng_orderquery    http://pha.pptv.com/D8608
4> vipbackend_sprint52_jiashuomeng_statement     http://pha.pptv.com/D8692
5> vipbackend_sprint52_jiashuomeng_pricingmanagement  http://pha.pptv.com/D8736
6> vipbackend_sprint52_jiashuomeng_vipquery    http://pha.pptv.com/D8829  <--master
7> vipbackend_sprint52_jiashuomeng_payrecordquery      http://pha.pptv.com/D9024
8> vipbackend_sprint52_jiashuomeng_channelaccount



git diff --cached master>/d/git/diff/diff.patch



git diff HEAD^>/d/git/diff/d.patch

8> vipbackend_sprint52_jiashuomeng_updatecard