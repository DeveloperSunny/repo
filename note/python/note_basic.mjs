-----------------------------------------

linux或者mac上直接运行.py文件

!/usr/bin/env python3

统一编码格式
# -*- coding: utf-8 -*-

-----------------------------------------

输出方式：
	print('The quick brown fox', 'jumps over', 'the lazy dog')  //遇到逗号“,”会输出一个空格

	print(r'\\\t\\')  //r''表示''内部的字符串默认不转义

	print('''line1 //交互模式换行
	... line2
	... line3''')

	print('''line1 //编程模式换行
	line2
	line3''')

	'Hi, %s, you have $%d.' % ('Michael', 1000000)

	%d	整数
	%f	浮点数
	%s	字符串
	%x	十六进制整数

	'%2d-%02d' % (3, 1)  //' 3-01' 		是否补0
	'%.2f' % 3.1415926  //'3.14' 		小数的位数
	%%来表示一个%  转译

-----------------------------------------

输入方式：
	name = input('please enter your name: ')

-----------------------------------------

boolean : True False    and or not

int()
float()
bool()
str()

-----------------------------------------

除法： 10/3 = 3.3333333333333335    10 // 3 = 3

-----------------------------------------

Unicode :最常用的是用两个字节表示一个字符（如果要用到非常偏僻的字符，就需要4个字节）
UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。
如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省空间


ord()函数获取字符的整数表示，chr()函数把编码转换为对应的字符

'ABC'.encode('ascii')  --> b'ABC'
'中文'.encode('utf-8')  --> b'\xe4\xb8\xad\xe6\x96\x87'
b'ABC'.decode('ascii') --> 'ABC'
b'\xe4\xb8\xad\xe6\x96\x87'.decode('utf-8')   ->  '中文'


 len('中文')  //字符串长度


-----------------------------------------

l = ['Michael', 'Bob', 'Tracy']

l[0]
l[-1]
l.append('aa')
l.insert(0,'bb')
l.pop()
l[1] = 'ccc'
l.sort()
t = (1,)



字符串：
	a.replace('a', 'A')

元组-->列表
    list()
列表-->元组
    tuple()
元组或者列表转字符串
"".join(list)
-----------------------------------------

age = 20
if age >= 6:
    print('teenager')
elif age >= 18:
    print('adult')
else:
    print('kid')

-----------------------------------------

for x : range(50):
	print(x)

while x--<10:
	print(x)

-----------------------------------------

d = {'Michael': 95, 'Bob': 75, 'Tracy': 85}
d['Michael']
d['Adam'] = 67

判断字典是否包含该Key，不包含的话就会报错
'Thomas' in d 

d.get('Thomas', -1)
d.get('Thomas')==None  //True
d.pop('ss')


s = set([1, 2, 3])
s.add(4)
s.remove(4)
-----------------------------------------

def my_abs(x):
    if not isinstance(x, (int, float)):
        raise TypeError('bad operand type')
    if x >= 0:
        return x
    else:
        return -x

-----------------------------------------

import math

def move(x, y, step, angle=0):
    nx = x + step * math.cos(angle)
    ny = y - step * math.sin(angle)
    return nx, ny

x, y = move(100, 100, 60, math.pi / 6)
print(x, y)

-----------------------------------------

默认参数：
	def power(x, n=2):
	    s = 1
	    while n > 0:
	        n = n - 1
	        s = s * x
	    return s

-----------------------------------------

def add_end(L=[]):
    L.append('END')
    return L
add_end()		//多次调用会出现多个END
add_end([])		//就不会出现这种情况

-----------------------------------------

可变参数
	def calc(*numbers):
	    sum = 0
	    for n in numbers:
	        sum = sum + n * n
	    return sum
调用方式：
	nums = [1, 2, 3]
	calc(*nums)

-----------------------------------------

关键字参数
	def person(name, age, **kw):
	    print('name:', name, 'age:', age, 'other:', kw)

调用方式
    erson('Adam', 45, gender='M', job='Engineer')

-----------------------------------------

命名关键字参数
	def person(name, age, *, city, job):
    	print(name, age, city, job)

	person('Jack', 24, city='Beijing', job='Engineer')

-----------------------------------------

参数组合
	def f1(a, b, c=0, *args, **kw):
	    print('a =', a, 'b =', b, 'c =', c, 'args =', args, 'kw =', kw)

	def f2(a, b, c=0, *, d, **kw):			# *后面的参数被视为命名关键字参数
	    print('a =', a, 'b =', b, 'c =', c, 'd =', d, 'kw =', kw)

-----------------------------------------

L = ['Michael', 'Sarah', 'Tracy', 'Bob', 'Jack']

L[0:3] == L[:3]				#  ['Michael', 'Sarah', 'Tracy']
L[-2:] 			# ['Bob', 'Jack']
L[:10:2] 		# 前10个每两个取一个

-----------------------------------------

d = {'name':'smallbug','age':12,'desc':'hello'}

for x in d.values():
	print(x)


d = {'x': 'A', 'y': 'B', 'z': 'C' }
for k, v in d.items():
	print(k, '=', v)


from collections import Iterable
isinstance('abc', Iterable)


for i, value in enumerate(['A', 'B', 'C']):
	print(i, value)

0 A
1 B
2 C

for x, y in [(1, 1), (2, 4), (3, 9)]:
	print(x, y)

-----------------------------------------

列表生成式

[x * x for x in range(1, 11)]

[x * x for x in range(1, 11) if x % 2 == 0]

[m + n for m in 'ABC' for n in 'XYZ']

[k + '=' + v for k, v in d.items()]

[s.lower() for s in L]

-----------------------------------------

生成器
	g = (x * x for x in range(10))

	next(g)

def fib(max):
    n, a, b = 0, 0, 1
    while n < max:
        yield b
        a, b = b, a + b
        n = n + 1
    return 'done'

f = fib(6)

-----------------------------------------

map/reduce

r = map(f, [1, 2, 3, 4, 5, 6, 7, 8, 9])

list(map(str, [1, 2, 3, 4, 5, 6, 7, 8, 9]))

reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)


//字符串转数字
1>
from functools import reduce
def fn(x, y):
	return x * 10 + y
def char2num(s):
	return {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9}[s]
reduce(fn, map(char2num, '13579'))

2>
def str2int(s):
    def fn(x, y):
        return x * 10 + y
    def char2num(s):
        return {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9}[s]
    return reduce(fn, map(char2num, s))

3>
def char2num(s):
    return {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9}[s]
def str2int(s):
    return reduce(lambda x, y: x * 10 + y, map(char2num, s))

-----------------------------------------

filter

def _odd_iter():
    n = 1
    while True:
        n = n + 2
        yield n

def _not_divisible(n):
    return lambda x: x % n > 0

def primes():
    yield 2
    it = _odd_iter() # 初始序列
    while True:
        n = next(it) # 返回序列的第一个数
        yield n
        it = filter(_not_divisible(n), it) # 构造新序列

# 打印1000以内的素数:
for n in primes():
    if n < 1000:
        print(n)
    else:
        break

-----------------------------------------

sorted([36, 5, -12, 9, -21], key=abs)

sorted(['bob', 'about', 'Zoo', 'Credit'], key=str.lower)

sorted(['bob', 'about', 'Zoo', 'Credit'], key=str.lower, reverse=True)

-----------------------------------------

返回函数

def lazy_sum(*args):
    def sum():
        ax = 0
        for n in args:
            ax = ax + n
        return ax
    return sum

返回闭包时牢记的一点就是：返回函数不要引用任何循环变量，或者后续会发生变化的变量。

def count():
    def f(j):
        def g():
            return j*j
        return g
    fs = []
    for i in range(1, 4):
        fs.append(f(i)) # f(i)立刻被执行，因此i的当前值被传入f()
    return fs

-----------------------------------------

匿名函数

def build(x, y):
    return lambda: x * x + y * y

-----------------------------------------




__name__	函数名




-----------------------------------------

装饰器

1>
def log(func):
    def wrapper(*args, **kw):
        print('call %s():' % func.__name__)
        return func(*args, **kw)
    return wrapper

@log
def now():
    print('2015-3-25')


2>
def log(text):
    def decorator(func):
        def wrapper(*args, **kw):
            print('%s %s():' % (text, func.__name__))
            return func(*args, **kw)
        return wrapper
    return decorator

@log('execute')

def now():
    print('2015-3-25')

/////////////////////////////////////////////

import functools

def log(func):
    @functools.wraps(func)
    def wrapper(*args, **kw):
        print('call %s():' % func.__name__)
        return func(*args, **kw)
    return wrapper

或者针对带参数的decorator：

import functools

def log(text):
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kw):
            print('%s %s():' % (text, func.__name__))
            return func(*args, **kw)
        return wrapper
    return decorator

-----------------------------------------

偏函数：
	import functools
	int2 = functools.partial(int, base=2)

作用：
	可以在函数外面包装一层，以此指定默认参数

-----------------------------------------

class Student(object):

    def __init__(self, name, score):
        self.name = name
        self.score = score

    def print_score(self):
        print('%s: %s' % (self.name, self.score))

bart = Student('Bart Simpson', 59)
lisa = Student('Lisa Simpson', 87)
bart.print_score()
lisa.print_score()

可以自由地给一个实例变量绑定属性，比如，给实例bart绑定一个name属性：
bart.name = 'Bart Simpson'


-----------------------------------------

type(123) ==int  # True

import types

type(Dog) == animal

isinstance([1, 2, 3], (list, tuple))

-----------------------------------------

dir('ABC')  # 获得一个对象的所有属性和方法

判断对象是否含有或设置某些属性


hasattr(obj, 'x')
setattr(obj, 'y', 19)
getattr(obj, 'y')

如果试图获取不存在的属性，会抛出AttributeError的错误

可以传入一个default参数，如果属性不存在，就返回默认值：getattr(obj, 'z', 404)

-----------------------------------------

__slots__变量，限制该class实例能添加的属性

__slots__定义的属性仅对当前类实例起作用，对继承的子类是不起作用的

///////////////////////////

def __str__(self):相当于java的toString

///////////////////////////

显示变量调用的不是__str__()，而是__repr__()，两者的区别是__str__()返回用户看到的字符串，而__repr__()返回程序开发者看到的字符串，也就是说，__repr__()是为调试服务的

///////////////////////////

如果一个类想被用于for ... in循环，类似list或tuple那样，就必须实现一个__iter__()方法，该方法返回一个迭代对象，然后，Python的for循环就会不断调用该迭代对象的__next__()方法拿到循环的下一个值，直到遇到StopIteration错误时退出循环。
class Fib(object):
    def __init__(self):
        self.a, self.b = 0, 1 # 初始化两个计数器a，b

    def __iter__(self):
        return self # 实例本身就是迭代对象，故返回自己

    def __next__(self):
        self.a, self.b = self.b, self.a + self.b # 计算下一个值
        if self.a > 100000: # 退出循环的条件
            raise StopIteration();
        return self.a # 返回下一个值

///////////////////////////

表现得像list那样按照下标取出元素，需要实现__getitem__()方法：
class Fib(object):
    def __getitem__(self, n):
        a, b = 1, 1
        for x in range(n):
            a, b = b, a + b
        return a

实现切片：
class Fib(object):
    def __getitem__(self, n):
        if isinstance(n, int): # n是索引
            a, b = 1, 1
            for x in range(n):
                a, b = b, a + b
            return a
        if isinstance(n, slice): # n是切片
            start = n.start
            stop = n.stop
            if start is None:
                start = 0
            a, b = 1, 1
            L = []
            for x in range(stop):
                if x >= start:
                    L.append(a)
                a, b = b, a + b
            return L
与之对应的是__setitem__()方法，把对象视作list或dict来对集合赋值。最后，还有一个__delitem__()方法，用于删除某个元素。

///////////////////////////

class Student(object):

    def __init__(self):
        self.name = 'Michael'

    def __getattr__(self, attr):
        if attr=='score':
            return 99

当调用不存在的属性时，比如score，Python解释器会试图调用__getattr__(self, 'score')来尝试获得属性，这样，我们就有机会返回score的值：

返回函数也是完全可以的：

class Student(object):

    def __getattr__(self, attr):
        if attr=='age':
            return lambda: 25

////////////////////////////////////////////////     

直接在实例本身上调用
class Student(object):
    def __init__(self, name):
        self.name = name

    def __call__(self):
        print('My name is %s.' % self.name)
s = Student('Michael')
s()

callable(Student()) # 判断是否可被调用

-----------------------------------------

限制属性操作
class Student(object):

    @property
    def score(self):
        return self._score

    @score.setter
    def score(self, value):
        if not isinstance(value, int):
            raise ValueError('score must be an integer!')
        if value < 0 or value > 100:
            raise ValueError('score must between 0 ~ 100!')
        self._score = value


设置属性只读
class Student(object):

    @property
    def birth(self):
        return self._birth

    @birth.setter
    def birth(self, value):
        self._birth = value

    @property
    def age(self):
        return 2015 - self._birth

-----------------------------------------

MixIn  多重继承

-----------------------------------------

from enum import Enum

Month = Enum('Month', ('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'))

for name, member in Month.__members__.items():
    print(name, '=>', member, ',', member.value)

value属性则是自动赋给成员的int常量，默认从1开始计数。

////////////////////////////////////

如果需要更精确地控制枚举类型，可以从Enum派生出自定义类：

from enum import Enum, unique

@unique
class Weekday(Enum):
    Sun = 0 # Sun的value被设定为0
    Mon = 1
    Tue = 2
    Wed = 3
    Thu = 4
    Fri = 5
    Sat = 6

print(Weekday.Tue.value)
print(Weekday(1))

-----------------------------------------

def fn(self, name='world'): # 先定义函数
    print('Hello, %s.' % name)

Hello = type('Hello', (object,), dict(hello=fn)) # 创建Hello class

-----------------------------------------

# metaclass是类的模板，所以必须从`type`类型派生：
class ListMetaclass(type):
    def __new__(cls, name, bases, attrs):
        attrs['add'] = lambda self, value: self.append(value)
        return type.__new__(cls, name, bases, attrs)
        
-----------------------------------------

import logging

try:
    print('try...')
    r = 10 / int('2')
    print('result:', r)
except ValueError as e:
     logging.exception(e)
except ZeroDivisionError as e:
     logging.exception(e)
else:
    print('no error!')
finally:
    print('finally...')
print('END')

-----------------------------------------
断言

def foo(s):
    n = int(s)
    assert n != 0, 'n is zero!'
    return 10 / n

def main():
    foo('0')

python3 -O err.py 关闭断言

-----------------------------------------

单元测试

import unittest

from mydict import Dict

class TestDict(unittest.TestCase):

    def test_init(self):
        d = Dict(a=1, b='test')
        self.assertEqual(d.a, 1)
        self.assertEqual(d.b, 'test')
        self.assertTrue(isinstance(d, dict))

    def test_key(self):
        d = Dict()
        d['key'] = 'value'
        self.assertEqual(d.key, 'value')

    def test_attr(self):
        d = Dict()
        d.key = 'value'
        self.assertTrue('key' in d)
        self.assertEqual(d['key'], 'value')

    def test_keyerror(self):
        d = Dict()
        with self.assertRaises(KeyError):
            value = d['empty']

    def test_attrerror(self):
        d = Dict()
        with self.assertRaises(AttributeError):
            value = d.empty

python3 -m unittest mydict_test   执行单元测试


class TestDict(unittest.TestCase):

    def setUp(self):
        print('setUp...')   # 方法执行前执行

    def tearDown(self):
        print('tearDown...')   # 方法执行后执行

-----------------------------------------

执行文档中的代码

if __name__=='__main__':
    import doctest
    doctest.testmod()

-----------------------------------------

try:
    f = open('/path/to/file', 'r')
    print(f.read())
finally:
    if f:
        f.close()

可以写成

    with open('/path/to/file', 'r') as f:
        print(f.read())

read()          如果文件很小，一次性读取最方便
read(size)      每次最多读取size个字节的内容
readline()      每次读取一行内容
readlines()     一次读取所有内容并按行返回list

带字符编码    f = open('/Users/michael/gbk.txt', 'r', encoding='gbk', errors='ignore')
errors参数，表示如果遇到编码错误后如何处理。

-----------------------------------------

读取二进制文件

f = open('/Users/michael/test.jpg', 'rb')


-----------------------------------------

写文件：

with open('/Users/michael/test.txt', 'w') as f:
    f.write('Hello, world!')

-----------------------------------------

StringIO

>>> from io import StringIO
>>> f = StringIO()
>>> f.write('hello')
5
>>> f.write(' ')
1
>>> f.write('world!')
6
>>> print(f.getvalue())
hello world!

-----------------------------------------

byteIO

>>> from io import BytesIO
>>> f = BytesIO()
>>> f.write('中文'.encode('utf-8'))
6
>>> print(f.getvalue())
b'\xe4\xb8\xad\xe6\x96\x87'

-----------------------------------------

获取某个环境变量的值
os.environ.get('PATH')

# 查看当前目录的绝对路径:
os.path.abspath('.')

# 在某个目录下创建一个新目录，首先把新目录的完整路径表示出来:
os.path.join('/Users/michael', 'testdir')
'/Users/michael/testdir'

# 然后创建一个目录:
os.mkdir('/Users/michael/testdir')

# 删掉一个目录:
os.rmdir('/Users/michael/testdir')

# 把一个路径拆分为两部分
os.path.split('/Users/michael/testdir/file.txt')
('/Users/michael/testdir', 'file.txt')

# 得到文件扩展名
os.path.splitext('/path/to/file.txt')
('/path/to/file', '.txt')

# 对文件重命名:
os.rename('test.txt', 'test.py')
# 删掉文件:
os.remove('test.py')

# 获取文件夹列表
[x for x in os.listdir('.') if os.path.isdir(x)]

所有Python文件
[x for x in os.listdir('.') if os.path.isfile(x) and os.path.splitext(x)[1]=='.py']

-----------------------------------------

import pickle
d = dict(name='Bob', age=20, score=88)
pickle.dumps(d)
b'\x80\x03}q\x00(X\x03\x00\x00\x00ageq\x01K\x14X\x05\x00\x00\x00scoreq\x02KXX\x04\x00\x00\x00nameq\x03X\x03\x00\x00\x00Bobq\x04u.'

序列化文件
f = open('dump.txt', 'wb')
pickle.dump(d, f)
f.close()

反序列化
f = open('dump.txt', 'rb')
d = pickle.load(f)
f.close()
d
{'age': 20, 'score': 88, 'name': 'Bob'}

-----------------------------------------

JSON

import json
d = dict(name='Bob', age=20, score=88)
json.dumps(d)
'{"age": 20, "score": 88, "name": "Bob"}'

json_str = '{"age": 20, "score": 88, "name": "Bob"}'
json.loads(json_str)
{'age': 20, 'score': 88, 'name': 'Bob'}

loads()或者对应的load()方法，前者把JSON的字符串反序列化，后者从file-like Object中读取字符串并反序列化

-----------------------------------------

import os

print('Process (%s) start...' % os.getpid())
# Only works on Unix/Linux/Mac:
pid = os.fork()
if pid == 0:
    print('I am child process (%s) and my parent is %s.' % (os.getpid(), os.getppid()))
else:
    print('I (%s) just created a child process (%s).' % (os.getpid(), pid))

输出
Process (876) start...
I (876) just created a child process (877).
I am child process (877) and my parent is 876.

-----------------------------------------

from multiprocessing import Process
import os

# 子进程要执行的代码
def run_proc(name):
    print('Run child process %s (%s)...' % (name, os.getpid()))

if __name__=='__main__':
    print('Parent process %s.' % os.getpid())
    p = Process(target=run_proc, args=('test',))
    print('Child process will start.')
    p.start()
    p.join()
    print('Child process end.')

执行结果如下：

Parent process 928.
Process will start.
Run child process test (929)...
Process end.

-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------